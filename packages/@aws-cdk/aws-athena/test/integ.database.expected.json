{
  "Resources": {
    "Bucket83908E77": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "WorkGroup26D4F855": {
      "Type": "AWS::Athena::WorkGroup",
      "Properties": {
        "Name": "workgroup",
        "RecursiveDeleteOption": true,
        "State": "ENABLED",
        "WorkGroupConfiguration": {
          "ResultConfiguration": {
            "OutputLocation": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "Bucket83908E77"
                  },
                  "/"
                ]
              ]
            }
          }
        }
      }
    },
    "DatabaseDatabaseQueryLambdaServiceRoleC2044186": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "DatabaseDatabaseQueryLambdaServiceRoleDefaultPolicy37D57D6C": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "athena:*",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "s3:*",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "glue:GetDatabase",
                "glue:CreateDatabase",
                "glue:DeleteDatabase",
                "glue:GetTables",
                "glue:GetTable",
                "glue:DeleteTable"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DatabaseDatabaseQueryLambdaServiceRoleDefaultPolicy37D57D6C",
        "Roles": [
          {
            "Ref": "DatabaseDatabaseQueryLambdaServiceRoleC2044186"
          }
        ]
      }
    },
    "DatabaseDatabaseQueryLambda72A9025B": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport logging\nimport cfnresponse\nimport botocore.session\nimport time\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nsession = botocore.session.get_session()\nclient = session.create_client('athena')\n\ndef on_event(event, context):\n    print(event)\n    try:\n        physical_id = 'AthenaQuery' + event['RequestId']\n        request_type = event['RequestType']\n\n        queryString = ''\n        if request_type == 'Create':\n            queryString = event['ResourceProperties']['CreateQueryString']\n        elif request_type == 'Update':\n            queryString = event['ResourceProperties']['UpdateQueryString']\n        elif request_type == 'Delete':\n            queryString = event['ResourceProperties']['DeleteQueryString']\n\n        workGroup = event['ResourceProperties']['WorkGroup']\n\n        query = client.start_query_execution(\n            QueryString=queryString,\n            WorkGroup=workGroup\n        )\n\n        query_id = query['QueryExecutionId']\n\n        sleep_amount = 2\n        max_attempts = 20\n        num_attempts = 0\n        execution_state = 'RUNNING'\n\n        while execution_state == 'RUNNING' or execution_state == 'QUEUED':\n          execution = client.get_query_execution(QueryExecutionId=query_id)\n          num_attempts += 1\n\n          execution_state = execution['QueryExecution']['Status']['State']\n          if execution_state == 'SUCCEEDED':\n            print('Query succeeded')\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_id)\n            break\n          elif execution_state == 'CANCELLED' or execution_state == 'FAILED' or num_attempts >= max_attempts:\n            print('Query failed or cancelled: ' + execution['QueryExecution']['Status']['StateChangeReason'])\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_id)\n            break\n\n          time.sleep(sleep_amount)\n\n    except Exception as e:\n        logger.exception(e)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {}, physical_id)\n"
        },
        "Handler": "index.on_event",
        "Role": {
          "Fn::GetAtt": [
            "DatabaseDatabaseQueryLambdaServiceRoleC2044186",
            "Arn"
          ]
        },
        "Runtime": "python3.7"
      },
      "DependsOn": [
        "DatabaseDatabaseQueryLambdaServiceRoleDefaultPolicy37D57D6C",
        "DatabaseDatabaseQueryLambdaServiceRoleC2044186"
      ]
    },
    "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleB3ED70A9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleDefaultPolicy869B6F48": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DatabaseDatabaseQueryLambda72A9025B",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleDefaultPolicy869B6F48",
        "Roles": [
          {
            "Ref": "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleB3ED70A9"
          }
        ]
      }
    },
    "DatabaseDatabaseQueryProviderframeworkonEventC9E9AC4C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3Bucket347EC9ED"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3VersionKeyDE3A9B7E"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3VersionKeyDE3A9B7E"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleB3ED70A9",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "DatabaseDatabaseQueryLambda72A9025B",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleDefaultPolicy869B6F48",
        "DatabaseDatabaseQueryProviderframeworkonEventServiceRoleB3ED70A9"
      ]
    },
    "DatabaseB269D8BB": {
      "Type": "Custom::AthenaDatabase",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DatabaseDatabaseQueryProviderframeworkonEventC9E9AC4C",
            "Arn"
          ]
        },
        "CreateQueryString": "CREATE DATABASE IF NOT EXISTS hello",
        "UpdateQueryString": "CREATE DATABASE IF NOT EXISTS hello",
        "DeleteQueryString": "DROP DATABASE IF EXISTS hello CASCADE",
        "WorkGroup": "workgroup"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "TableTableQueryLambdaServiceRoleB41CAADB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "TableTableQueryLambdaServiceRoleDefaultPolicy2275D8EF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "athena:*",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "s3:*",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "glue:GetDatabase",
                "glue:GetTable",
                "glue:CreateTable",
                "glue:DeleteTable",
                "glue:GetPartitions",
                "glue:GetPartition",
                "glue:DeletePartition"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "TableTableQueryLambdaServiceRoleDefaultPolicy2275D8EF",
        "Roles": [
          {
            "Ref": "TableTableQueryLambdaServiceRoleB41CAADB"
          }
        ]
      }
    },
    "TableTableQueryLambda9772E3A5": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport logging\nimport cfnresponse\nimport botocore.session\nimport time\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\nsession = botocore.session.get_session()\nclient = session.create_client('athena')\n\ndef on_event(event, context):\n    print(event)\n    try:\n        physical_id = 'AthenaQuery' + event['RequestId']\n        request_type = event['RequestType']\n\n        queryString = ''\n        if request_type == 'Create':\n            queryString = event['ResourceProperties']['CreateQueryString']\n        elif request_type == 'Update':\n            queryString = event['ResourceProperties']['UpdateQueryString']\n        elif request_type == 'Delete':\n            queryString = event['ResourceProperties']['DeleteQueryString']\n\n        workGroup = event['ResourceProperties']['WorkGroup']\n\n        query = client.start_query_execution(\n            QueryString=queryString,\n            WorkGroup=workGroup\n        )\n\n        query_id = query['QueryExecutionId']\n\n        sleep_amount = 2\n        max_attempts = 20\n        num_attempts = 0\n        execution_state = 'RUNNING'\n\n        while execution_state == 'RUNNING' or execution_state == 'QUEUED':\n          execution = client.get_query_execution(QueryExecutionId=query_id)\n          num_attempts += 1\n\n          execution_state = execution['QueryExecution']['Status']['State']\n          if execution_state == 'SUCCEEDED':\n            print('Query succeeded')\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_id)\n            break\n          elif execution_state == 'CANCELLED' or execution_state == 'FAILED' or num_attempts >= max_attempts:\n            print('Query failed or cancelled: ' + execution['QueryExecution']['Status']['StateChangeReason'])\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_id)\n            break\n\n          time.sleep(sleep_amount)\n\n    except Exception as e:\n        logger.exception(e)\n        cfnresponse.send(event, context, cfnresponse.FAILED, {}, physical_id)\n"
        },
        "Handler": "index.on_event",
        "Role": {
          "Fn::GetAtt": [
            "TableTableQueryLambdaServiceRoleB41CAADB",
            "Arn"
          ]
        },
        "Runtime": "python3.7"
      },
      "DependsOn": [
        "TableTableQueryLambdaServiceRoleDefaultPolicy2275D8EF",
        "TableTableQueryLambdaServiceRoleB41CAADB"
      ]
    },
    "TableTableQueryProviderframeworkonEventServiceRole21B20085": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "TableTableQueryProviderframeworkonEventServiceRoleDefaultPolicy932C83B7": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "TableTableQueryLambda9772E3A5",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "TableTableQueryProviderframeworkonEventServiceRoleDefaultPolicy932C83B7",
        "Roles": [
          {
            "Ref": "TableTableQueryProviderframeworkonEventServiceRole21B20085"
          }
        ]
      }
    },
    "TableTableQueryProviderframeworkonEvent682A454D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3Bucket347EC9ED"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3VersionKeyDE3A9B7E"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3VersionKeyDE3A9B7E"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "TableTableQueryProviderframeworkonEventServiceRole21B20085",
            "Arn"
          ]
        },
        "Runtime": "nodejs10.x",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "TableTableQueryLambda9772E3A5",
                "Arn"
              ]
            }
          }
        },
        "Timeout": 900
      },
      "DependsOn": [
        "TableTableQueryProviderframeworkonEventServiceRoleDefaultPolicy932C83B7",
        "TableTableQueryProviderframeworkonEventServiceRole21B20085"
      ]
    },
    "TableCD117FA1": {
      "Type": "Custom::AthenaTable",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "TableTableQueryProviderframeworkonEvent682A454D",
            "Arn"
          ]
        },
        "CreateQueryString": {
          "Fn::Join": [
            "",
            [
              "\n      CREATE EXTERNAL TABLE IF NOT EXISTS hello.world (ColumnA string,ColumnB int)\n      ROW FORMAT DELIMITED FIELDS TERMINATED BY ';'\n      STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\n      LOCATION 's3://",
              {
                "Ref": "Bucket83908E77"
              },
              "/data/'\n      TBLPROPERTIES ('has_encrypted_data' = 'false')"
            ]
          ]
        },
        "UpdateQueryString": {
          "Fn::Join": [
            "",
            [
              "\n      CREATE EXTERNAL TABLE IF NOT EXISTS hello.world (ColumnA string,ColumnB int)\n      ROW FORMAT DELIMITED FIELDS TERMINATED BY ';'\n      STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\n      LOCATION 's3://",
              {
                "Ref": "Bucket83908E77"
              },
              "/data/'\n      TBLPROPERTIES ('has_encrypted_data' = 'false')"
            ]
          ]
        },
        "DeleteQueryString": "DROP TABLE world",
        "WorkGroup": "workgroup"
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    }
  },
  "Parameters": {
    "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3Bucket347EC9ED": {
      "Type": "String",
      "Description": "S3 bucket for asset \"082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33a\""
    },
    "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aS3VersionKeyDE3A9B7E": {
      "Type": "String",
      "Description": "S3 key for asset version \"082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33a\""
    },
    "AssetParameters082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33aArtifactHash0DA92241": {
      "Type": "String",
      "Description": "Artifact hash for asset \"082715a6f74a051218c287c9750d2fff07912878d011fad47eb21f33f335a33a\""
    }
  }
}